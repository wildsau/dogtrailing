package de.wildsau.dogtrailing.entities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table TRAILING_SESSION.
 */
public class TrailingSessionDao extends AbstractDao<TrailingSession, Long> {

    public static final String TABLENAME = "TRAILING_SESSION";

    /**
     * Properties of entity TrailingSession.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Notes = new Property(2, String.class, "notes", false, "NOTES");
        public final static Property Distractions = new Property(3, String.class, "distractions", false, "DISTRACTIONS");
        public final static Property Finds = new Property(4, String.class, "finds", false, "FINDS");
        public final static Property Test = new Property(5, Boolean.class, "test", false, "TEST");
        public final static Property Blind = new Property(6, Boolean.class, "blind", false, "BLIND");
        public final static Property Created = new Property(7, java.util.Date.class, "created", false, "CREATED");
        public final static Property Searched = new Property(8, java.util.Date.class, "searched", false, "SEARCHED");
        public final static Property ExposureTime = new Property(9, Long.class, "exposureTime", false, "EXPOSURE_TIME");
        public final static Property Weather = new Property(10, String.class, "weather", false, "WEATHER");
        public final static Property Temperature = new Property(11, Integer.class, "temperature", false, "TEMPERATURE");
        public final static Property Humidity = new Property(12, Integer.class, "humidity", false, "HUMIDITY");
        public final static Property Wind = new Property(13, String.class, "wind", false, "WIND");
        public final static Property WindDirection = new Property(14, String.class, "windDirection", false, "WIND_DIRECTION");
        public final static Property Terrain = new Property(15, String.class, "terrain", false, "TERRAIN");
        public final static Property Locality = new Property(16, String.class, "locality", false, "LOCALITY");
        public final static Property SelfCreated = new Property(17, Boolean.class, "selfCreated", false, "SELF_CREATED");
        public final static Property LaidBy = new Property(18, String.class, "laidBy", false, "LAID_BY");
        public final static Property SearchItem = new Property(19, String.class, "searchItem", false, "SEARCH_ITEM");
        public final static Property DogHandler = new Property(20, String.class, "dogHandler", false, "DOG_HANDLER");
        public final static Property Dog = new Property(21, String.class, "dog", false, "DOG");
        public final static Property Length = new Property(22, Double.class, "length", false, "LENGTH");
        public final static Property StartingBehaviour = new Property(23, Integer.class, "startingBehaviour", false, "STARTING_BEHAVIOUR");
        public final static Property CornerWork = new Property(24, Integer.class, "cornerWork", false, "CORNER_WORK");
        public final static Property SearchBehaviour = new Property(25, Integer.class, "searchBehaviour", false, "SEARCH_BEHAVIOUR");
        public final static Property DistractionsBehaviour = new Property(26, Integer.class, "distractionsBehaviour", false, "DISTRACTIONS_BEHAVIOUR");
        public final static Property OverallImpression = new Property(27, Integer.class, "overallImpression", false, "OVERALL_IMPRESSION");
        public final static Property OverallImpressionDogHandler = new Property(28, Integer.class, "overallImpressionDogHandler", false, "OVERALL_IMPRESSION_DOG_HANDLER");
    }

    ;


    public TrailingSessionDao(DaoConfig config) {
        super(config);
    }

    public TrailingSessionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "'TRAILING_SESSION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'NOTES' TEXT," + // 2: notes
                "'DISTRACTIONS' TEXT," + // 3: distractions
                "'FINDS' TEXT," + // 4: finds
                "'TEST' INTEGER," + // 5: test
                "'BLIND' INTEGER," + // 6: blind
                "'CREATED' INTEGER," + // 7: created
                "'SEARCHED' INTEGER," + // 8: searched
                "'EXPOSURE_TIME' INTEGER," + // 9: exposureTime
                "'WEATHER' TEXT," + // 10: weather
                "'TEMPERATURE' INTEGER," + // 11: temperature
                "'HUMIDITY' INTEGER," + // 12: humidity
                "'WIND' TEXT," + // 13: wind
                "'WIND_DIRECTION' TEXT," + // 14: windDirection
                "'TERRAIN' TEXT," + // 15: terrain
                "'LOCALITY' TEXT," + // 16: locality
                "'SELF_CREATED' INTEGER," + // 17: selfCreated
                "'LAID_BY' TEXT," + // 18: laidBy
                "'SEARCH_ITEM' TEXT," + // 19: searchItem
                "'DOG_HANDLER' TEXT," + // 20: dogHandler
                "'DOG' TEXT," + // 21: dog
                "'LENGTH' REAL," + // 22: length
                "'STARTING_BEHAVIOUR' INTEGER," + // 23: startingBehaviour
                "'CORNER_WORK' INTEGER," + // 24: cornerWork
                "'SEARCH_BEHAVIOUR' INTEGER," + // 25: searchBehaviour
                "'DISTRACTIONS_BEHAVIOUR' INTEGER," + // 26: distractionsBehaviour
                "'OVERALL_IMPRESSION' INTEGER," + // 27: overallImpression
                "'OVERALL_IMPRESSION_DOG_HANDLER' INTEGER);"); // 28: overallImpressionDogHandler
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TRAILING_SESSION'";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TrailingSession entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }

        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(3, notes);
        }

        String distractions = entity.getDistractions();
        if (distractions != null) {
            stmt.bindString(4, distractions);
        }

        String finds = entity.getFinds();
        if (finds != null) {
            stmt.bindString(5, finds);
        }

        Boolean test = entity.getTest();
        if (test != null) {
            stmt.bindLong(6, test ? 1l : 0l);
        }

        Boolean blind = entity.getBlind();
        if (blind != null) {
            stmt.bindLong(7, blind ? 1l : 0l);
        }

        java.util.Date created = entity.getCreated();
        if (created != null) {
            stmt.bindLong(8, created.getTime());
        }

        java.util.Date searched = entity.getSearched();
        if (searched != null) {
            stmt.bindLong(9, searched.getTime());
        }

        Long exposureTime = entity.getExposureTime();
        if (exposureTime != null) {
            stmt.bindLong(10, exposureTime);
        }

        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(11, weather);
        }

        Integer temperature = entity.getTemperature();
        if (temperature != null) {
            stmt.bindLong(12, temperature);
        }

        Integer humidity = entity.getHumidity();
        if (humidity != null) {
            stmt.bindLong(13, humidity);
        }

        String wind = entity.getWind();
        if (wind != null) {
            stmt.bindString(14, wind);
        }

        String windDirection = entity.getWindDirection();
        if (windDirection != null) {
            stmt.bindString(15, windDirection);
        }

        String terrain = entity.getTerrain();
        if (terrain != null) {
            stmt.bindString(16, terrain);
        }

        String locality = entity.getLocality();
        if (locality != null) {
            stmt.bindString(17, locality);
        }

        Boolean selfCreated = entity.getSelfCreated();
        if (selfCreated != null) {
            stmt.bindLong(18, selfCreated ? 1l : 0l);
        }

        String laidBy = entity.getLaidBy();
        if (laidBy != null) {
            stmt.bindString(19, laidBy);
        }

        String searchItem = entity.getSearchItem();
        if (searchItem != null) {
            stmt.bindString(20, searchItem);
        }

        String dogHandler = entity.getDogHandler();
        if (dogHandler != null) {
            stmt.bindString(21, dogHandler);
        }

        String dog = entity.getDog();
        if (dog != null) {
            stmt.bindString(22, dog);
        }

        Double length = entity.getLength();
        if (length != null) {
            stmt.bindDouble(23, length);
        }

        Integer startingBehaviour = entity.getStartingBehaviour();
        if (startingBehaviour != null) {
            stmt.bindLong(24, startingBehaviour);
        }

        Integer cornerWork = entity.getCornerWork();
        if (cornerWork != null) {
            stmt.bindLong(25, cornerWork);
        }

        Integer searchBehaviour = entity.getSearchBehaviour();
        if (searchBehaviour != null) {
            stmt.bindLong(26, searchBehaviour);
        }

        Integer distractionsBehaviour = entity.getDistractionsBehaviour();
        if (distractionsBehaviour != null) {
            stmt.bindLong(27, distractionsBehaviour);
        }

        Integer overallImpression = entity.getOverallImpression();
        if (overallImpression != null) {
            stmt.bindLong(28, overallImpression);
        }

        Integer overallImpressionDogHandler = entity.getOverallImpressionDogHandler();
        if (overallImpressionDogHandler != null) {
            stmt.bindLong(29, overallImpressionDogHandler);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public TrailingSession readEntity(Cursor cursor, int offset) {
        TrailingSession entity = new TrailingSession( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // notes
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // distractions
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // finds
                cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // test
                cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // blind
                cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // created
                cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // searched
                cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // exposureTime
                cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weather
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // temperature
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // humidity
                cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // wind
                cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // windDirection
                cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // terrain
                cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // locality
                cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // selfCreated
                cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // laidBy
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // searchItem
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // dogHandler
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dog
                cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22), // length
                cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // startingBehaviour
                cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // cornerWork
                cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // searchBehaviour
                cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // distractionsBehaviour
                cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // overallImpression
                cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28) // overallImpressionDogHandler
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, TrailingSession entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNotes(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDistractions(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFinds(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTest(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setBlind(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setCreated(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setSearched(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setExposureTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setWeather(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTemperature(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setHumidity(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setWind(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setWindDirection(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTerrain(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLocality(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSelfCreated(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setLaidBy(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setSearchItem(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDogHandler(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDog(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLength(cursor.isNull(offset + 22) ? null : cursor.getDouble(offset + 22));
        entity.setStartingBehaviour(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setCornerWork(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setSearchBehaviour(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setDistractionsBehaviour(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setOverallImpression(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setOverallImpressionDogHandler(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(TrailingSession entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(TrailingSession entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

}
